<?php

/**
 * Get all hook_profile_page_category
 *
 * Use it as hook_profile_page_category()
 *
 * Build a menu link in the form of settings/uid/category
 * and load a page callback
 *
 * @todo query the menu_router to transform every menu link starting with
 * user/%uid into the form of settings/uid/category.
 * This could be done here or in a hook_menu_alter
 */
function _profile_page_user_categories($account = NULL) {
  $categories = array();

  foreach (module_list() as $module) {
    if ($data = module_invoke($module, 'profile_page_category', $account, '')) {
      $categories = array_merge($data, $categories);
    }
  }

  usort($categories, '_user_sort');
  return $categories;
}

/**
 * Get all hook_profile_page_menu_disable()
 */
function _profile_page_disable_menu_links() {
  $links = array();

  foreach (module_list() as $module) {
    if ($data = module_invoke($module, 'profile_page_menu_disable', '')) {
      $links = array_merge($data, $links);
    }
  }

  return $links;
}

/**
 * Implements hook_permission()
 */
function profile_page_permission() {
	return array(
    'administer profile page' => array(
      'title' => t('Administer Profile Page'), 
      'description' => t('Perform administration tasks for Profile Page.'),
    ),
  );
}

/**
 * Redirect to the own settings page
 */
function profile_page_settings_redirect() {
	global $user;
	
	drupal_goto("settings/{$user->uid}");
}

/**
 * Access callback to give user access
 */
function profile_page_settings_access() {
	global $user;
	
	if(user_edit_access($user)) {
		return TRUE;
	}
}

function profile_page_login_redirect() {
	drupal_goto("user/login");
}

function profile_page_login_access() {
	if(user_is_anonymous()) {
		return TRUE;
	}
}


function profile_page_logout_redirect() {
	drupal_goto("user/logout");
}

function profile_page_logout_access() {
	if(user_is_logged_in()) {
		return TRUE;
	}
}

function profile_page_profile_redirect() {
	drupal_goto("user");
}

function profile_page_profile_access() {
	if(user_is_logged_in()) {
		return TRUE;
	}
}


/**
 * Implements hook_menu()
 */
function profile_page_menu() {
	
	$items['login'] = array(
		'title' => "Log in",
		'page callback' => 'profile_page_login_redirect',
		'access callback' => 'profile_page_login_access',
		'type' => MENU_NORMAL_ITEM,
		'menu_name' => 'user-menu',
		'weight' => -1000,
	);
	
	$items['logout'] = array(
		'title' => "Log out",
		'page callback' => 'profile_page_logout_redirect',
		'access callback' => 'profile_page_logout_access',
		'type' => MENU_NORMAL_ITEM,
		'menu_name' => 'user-menu',
		'weight' => 1000,
	);
	
	$items['profile'] = array(
		'title' => "Profile",
		'page callback' => 'profile_page_profile_redirect',
		'access callback' => 'profile_page_profile_access',
		'type' => MENU_NORMAL_ITEM,
		'menu_name' => 'user-menu',
		'weight' => -101,
	);
	
	$items['settings'] = array(
		'title' => "Settings",
		'page callback' => 'profile_page_settings_redirect',
		'access callback' => 'profile_page_settings_access',
		'type' => MENU_NORMAL_ITEM,
		'menu_name' => 'user-menu',
		'weight' => -100,
	);

	$items['settings/%user'] = array(
		'title' => 'Settings', 
		'page callback' => 'drupal_get_form', 
		'page arguments' => array('profile_page_account_settings_form', 1), 
		'access callback' => 'user_edit_access', 
		'access arguments' => array(1), 
		'file path' => drupal_get_path("module", "profile_page") . '/includes',
		'file' => 'profile_page_account.settings.inc',
	);
	
	$items['settings/%user/account'] = array(
		'title' => 'Account', 
		'type' => MENU_DEFAULT_LOCAL_TASK, 
		'load arguments' => array('%map', '%index'),
	);

	if ($categories = _profile_page_user_categories()) {
		foreach ($categories as $key => $category) {
			// 'account' is already handled by the MENU_DEFAULT_LOCAL_TASK.
			if ($category['name'] != 'account') {
				$items['settings/%user/' . $category['name']] = array(
					'title callback' => 'check_plain', 
					'title arguments' => array($category['title']), 
					'page callback' => isset($category['page callback']) ? $category['page callback'] : 'drupal_get_form',
					'page arguments' => isset($category['page arguments']) ? $category['page arguments'] : '', 
					'access callback' => isset($category['access callback']) ? $category['access callback'] : 'user_edit_access', 
					'access arguments' => isset($category['access arguments']) ? $category['access arguments'] : array(1), 
					'type' => MENU_LOCAL_TASK, 
					'weight' => $category['weight'], 
					'load arguments' => array('%map', '%index'),
					'file path' => $category['file path'],
					'file' => $category['file'],
				);
			}
		}
	}
	
	// Administration page
  $items['admin/config/people/profile_page'] = array(
    'title' => 'Profile Page Configuration',
		'description' => t("Add some description here"),
		'page callback' => 'profile_page_settings',
		'file path' => drupal_get_path("module", "profile_page") . '/includes',
    'file' => 'profile_page.admin.inc',
		'access arguments' => array('administer profile page'),
		'position' => 'left', 
  );
	
  return $items;
}

/**
 * Implements hook_profile_page()
 */
function profile_page_profile_page_category() {
  $items = array();
	
	$items[] = array(
    'name' => 'profile', 
    'title' => t('Profile'), 
    'weight' => 2,
		'page arguments' => array('profile_page_profile_settings_form', 1, 2),
		'file path' => drupal_get_path("module", "profile_page") . '/includes',
		'file' => 'profile_page_profile.settings.inc'
  );
	$items[] = array(
    'name' => 'password', 
		'title' => t('Password'), 
		'weight' => 1,
		'page arguments' => array('profile_page_password_settings_form', 1, 2),
		'file path' => drupal_get_path("module", "profile_page") . '/includes',
		'file' => 'profile_page_password.settings.inc'
  );
	if(module_exists("shortcut")) {
		$items[] = array(
			'name' => 'shortcuts', 
			'title' => t('Shortcuts'), 
			'weight' => 3,
			'page arguments' => array('shortcut_set_switch'),
			'file path' => drupal_get_path("module", "shortcut"),
			'file' => 'shortcut.admin.inc'
		);
	}
	if(module_exists("openid")) {
		$items[] = array(
			'name' => 'openid', 
			'title' => t('OpenID Identities'), 
			'weight' => 10,
			'page callback' => 'profile_page_openid_settings_form',
			'page arguments' => array(1),
			'file path' => drupal_get_path("module", "profile_page") . '/includes',
			'file' => 'profile_page_openid.settings.inc'
		);
	}
	
	return $items;
}

/**
 * Implements hook_profile_page_menu_disable()
 */
function profile_page_profile_page_menu_disable() {
	return array(
		'user/%user/openid',
		'user/%user/shortcuts'
	);
} 

/**
 * Implements hook_menu_alter()
 */
function profile_page_menu_alter(&$items) {
	
	$items['user']['type'] = MENU_SUGGESTED_ITEM;
	$items['user/login']['type'] = MENU_SUGGESTED_ITEM;
	$items['user/logout']['type'] = MENU_SUGGESTED_ITEM;
	
  // Alter the menu item to use 'profile_page_user_view_page' instead of the
	// default 'user_view_page'
	$items['user/%user/view']['page callback'] = 'profile_page_user_view_page';
  $items['user/%user']['page callback'] = 'profile_page_user_view_page';
	
	// Change the tabs name
	$items['user/%user/view']['title'] = 'Profile';
	
	// We don't really disable this so admins can access this page
	// This is temporary
	$items['user/%user/edit']['type'] = MENU_CALLBACK;
	
	
	// Disable all links implemented in hook_profile_page_menu_disable()
	if ($links = _profile_page_disable_menu_links()) {
		foreach ($links as $link) {
			// 'account' is already handled by the MENU_DEFAULT_LOCAL_TASK.
			$items[$link]['type'] = MENU_CALLBACK;
		}
	}
}

/**
 * Call some default settings in a form we always use
 */
function profile_page_default_settings(&$form, &$form_state, &$account) {

  // During initial form build, add the entity to the form state for use during
  // form building and processing. During a rebuild, use what is in the form
  // state.
  if (!isset($form_state['user'])) {
    $form_state['user'] = $account;
  }
  else {
    $account = $form_state['user'];
  }

  // @todo Legacy support. Modules are encouraged to access the entity using
  //   $form_state. Remove in Drupal 8.
  $form['#user'] = $account;
}

/**
 * Call default values we allways use on a submit callback
 */
function profile_page_default_settings_submit(&$form, &$form_state) {
	$account = $form_state['user'];
  // Remove unneeded values.
  form_state_values_clean($form_state);

  // Before updating the account entity, keep an unchanged copy for use with
  // user_save() later. This is necessary for modules implementing the user
  // hooks to be able to react on changes by comparing the values of $account
  // and $edit.
  $account_unchanged = clone $account;

  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);

  user_save($account_unchanged, $edit, "account");
  $form_state['values']['uid'] = $account->uid;

  // Clear the page cache because pages can contain usernames and/or profile information:
  cache_clear_all();

  drupal_set_message(t('The changes have been saved.'));
}

/**
 * Callback to replace the default user_view_page
 *
 * @see profile_page_user_view
 * @see profile_page_menu_alter
 */
function profile_page_user_view_page($account) {
	// An administrator may try to view a non-existent account,
  // so we give them a 404 (versus a 403 for non-admins).
  return is_object($account) ? profile_page_user_view($account) : MENU_NOT_FOUND;
}

/**
 * This is the actual page, it starts as a copy of the
 * default user_view page, loaded in user_view_page
 *
 * @see profile_page_user_view_page()
 */
function profile_page_user_view($account, $view_mode = 'full', $langcode = NULL) {
  /**
	if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  // Retrieve all profile fields and attach to $account->content.
  user_build_content($account, $view_mode, $langcode);

  $build = $account->content;
  // We don't need duplicate rendering info in account->content.
  unset($account->content);

  $build += array(
    '#theme' => 'user_profile', 
    '#account' => $account, 
    '#view_mode' => $view_mode, 
    '#language' => $langcode,
  );

  // Allow modules to modify the structured user.
  $type = 'user';
  drupal_alter(array('user_view', 'entity_view'), $build, $type);

  return $build;
  **/
	
	// Set the context
	$context = context_load("profile");
	if(isset($context)) {
		context_set('context', "profile", $context);	
	}
	
	return theme('profile_page', array('account' => $account));
}

/**
 * Implements hook_theme()
 */
function profile_page_theme($existing, $type, $theme, $path) {
  return array(
    'profile_page' => array(
      'variables' => array('account' => NULL),
			'template' => 'profile-page',
    ),
		'profile_page_join' => array(
      'variables' => array(),
			'template' => 'profile-page-join',
    ), 
  );
}

/**
 * Preprocess function
 */
function profile_page_preprocess_profile_page(&$vars) {
	
}

/**
 * Alter the settings page
 */
function profile_page_form_user_profile_form_alter(&$form, &$form_state, $form_id) {  
	// print '<pre>' . htmlentities(print_r($form, 1)) . '</pre>';
}

/**
 * Implement hook_block_info()
 */
function profile_page_block_info() {
  // This example comes from node.module.
  $blocks['profile-page-join'] = array(
    'info' => t('Create account'), 
  );
	
	return $blocks;
}

/**
 * Implement hook_block_view()
 */
function profile_page_block_view($delta = '') {
  // This example comes from node.module. Note that you can also return a
  // renderable array rather than rendered HTML for 'content'.
  $block = array();

  switch ($delta) {
    case 'profile-page-join':
      $block['subject'] = t('Create your account');
      $block['content'] = theme('profile_page_join');
      break;

  }
  return $block;
}
